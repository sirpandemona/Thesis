import numpy as np
import matplotlib.pyplot as plt
import h5py

def HW(n):
    return bin(n).count("1")

sbox = np.array([
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
])

mask = np.array([0x03, 0x0c, 0x35, 0x3a, 0x50, 0x5f, 0x66, 0x69, 0x96, 0x99, 0xa0, 0xaf, 0xc5, 0xca, 0xf3, 0xfc])

def intermediate_value(pt, keyguess, offset):
    return sbox[int(pt) ^ int(keyguess)] ^ mask[(int(offset)+1)%16]


dataset_size = 80000
traceset_size = 5000
subkey = 0

dpav4 = np.load('270000_274000_DPAV4V2.npz')
traces = np.reshape(dpav4['arr_0'],(traceset_size,-1))
n_samples = len(traces[0])

#with open("compressed/dpav4_2_index") as f:
with open('C:\\Users\\vascodebruijn\\Documents\\GitHub\\Thesis\\Python\\dpav4_rsm_index.txt') as f:
    content = f.readlines()

content = [x.strip() for x in content]
content = [x.split() for x in content]
#content = np.array(content).reshape(dataset_size,8)
content = np.array(content).reshape(100000,6)

#(key, plaintext, ciphertext, shuffle0, shuffle10, offset, dirname, trcname) = (content[:,0], content[:,1], content[:,2], content[:,3], content[:,4], content[:,5], content[:,6], content[:,7])
(key, plaintext, ciphertext, offset, dirname, trcname) = (content[:,0], content[:,1], content[:,2], content[:,3], content[:,4], content[:,5])

plaintext = np.array([[int(x[i:i+2],16) for i in range(0,32,2)] for x in plaintext])
ciphertext = np.array([[int(x[i:i+2],16) for i in range(0,32,2)] for x in ciphertext])
offset = np.array([[int(x[i:i+1],16) for i in range(0,16,1)] for x in offset])
key = np.array([[int(x[i:i+2],16) for i in range(0,32,2)] for x in key])
shuffle0 = np.array([[int(x[i:i+1],16) for i in range(0,16,1)] for x in shuffle0])
shuffle10 = np.array([[int(x[i:i+1],16) for i in range(0,16,1)] for x in shuffle10])
labels = np.empty(dataset_size,dtype=np.uint8)
for i in range(dataset_size):
    labels[i] = intermediate_value(plaintext[i][subkey], key[i][subkey], offset[i][subkey])
labels=np.array(labels)
num_classes = np.max(labels)+1

plaintext = plaintext[:traceset_size]
ciphertext = ciphertext[:traceset_size]
offset = offset[:traceset_size]
key = key[:traceset_size]
shuffle0=shuffle0[:traceset_size]
shuffle10=shuffle10[:traceset_size]
labels=labels[:traceset_size]

print(plaintext.shape, labels.shape, key.shape, mask.shape, offset.shape)

#print some random traces
rand = np.random.randint(0,50,10)
plt.figure(1)
for indice in rand:
    plt.plot(traces[indice])
plt.show()

is_hw=False
if is_hw:
    # transform to HW model
    for i in range(len(labels)):
        labels[i] = HW(labels[i])
    num_classes = np.max(labels)+1

#sort data according to labels and compute average for each label
p=np.argsort(labels)
labels,traces=labels[p],traces[p]

x=np.arange(len(traces[0]))
mtr=np.empty((num_classes,len(traces[0])))

#create models
upperbound=0
lowerbound=0
delimiters = np.empty(num_classes)
for i in range(num_classes):
    while (upperbound<len(traces) and labels[upperbound]==i):
        upperbound+=1
    mtr[i]=np.mean(traces[lowerbound:upperbound],axis=0)
    delimiters[i] = upperbound
    print(delimiters[i])
    lowerbound=upperbound
    upperbound+=1
print(upperbound)
delimiters = np.insert(delimiters,0,0)

#compute noise of each trace by removing the mean
nois = np.empty(traces.shape)
for k in range(num_classes):
    for i in range(int(delimiters[k]),int(delimiters[k+1])):
        nois[i] = traces[i] - mtr[k]


var = np.var(traces,axis=0)
noisvar = np.var(nois,axis=0)

#compute the signal-to-noise ratio
snr = var/noisvar

plt.figure(2)
plt.plot(snr)
plt.savefig('snr.jpg')


